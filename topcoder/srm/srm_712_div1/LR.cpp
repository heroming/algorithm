#include <vector>
#include <list>
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <string>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

#define px first
#define py second
#define pb push_back
#define mp make_pair
#define pque priority_queue
#define lowbit(x) ((x) & -(x))
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define clr(v, e) memset(v, e, sizeof(v))
#define rep(it, v) for (auto it : v)
#define forn(i, n) for (int i = 0; i < (n); ++ i)
#define rforn(i, n) for (int i = (n) - 1; i >= 0; -- i)
#define form(i, a, b) for (int i = (a); i <= (b); ++ i)
#define rform(i, a, b) for (int i = (b); i >= (a); -- i)
#define forv(i, v) for (int i = 0; i < sz(v); ++ i)
#define iter(it, v) for (auto it = v.begin(); it != v.end(); ++ it)

typedef long long lint;
typedef vector<int> vint;
typedef vector<string> vstr;
typedef pair<int, int> pint;
typedef vector<lint> vlint;
typedef vector<pint> vpint;

class LR {
public:
	string construct(vector<long long>, vector<long long>);
};

int n;
vlint s, t;
string no = "No solution";

bool valid(const int l, const int r) {
    if (l + r > 100) return 0;
    
    vlint u(all(s));
    vlint v(all(s));
 
    // L
    forn (k, l) {
        forv (i, u) {
            if (i == 0) {
                u[i] += v[n - 1];
            } else {
                u[i] += v[i - 1];
            }
        }
        forv (i, u) {
            if (u[i] > t[i]) return 0;
            v[i] = u[i];
        }
    }
    
    // R
    forn (k, r) {
        forv (i, u) {
            if (i == n - 1) {
                u[i] += v[0];
            } else {
                u[i] += v[i + 1];
            }
        }
        forv (i, u) {
            if (u[i] > t[i]) return 0;
            v[i] = u[i];
        }
    }
    forv (i, u) if (u[i] != t[i]) return 0;
    return 1;
}

string LR::construct(vector<long long> a, vector<long long> b) {
    s.clear();
    t.clear();
    forv (i, a) {
        s.pb(a[i]);
        t.pb(b[i]);
    }
    n = sz(s);
    form (l, 0, 100) form (r, 0, 100) {
        if (valid(l, r)) {
            string ans = "";
            forn (i, l) ans += "L";
            forn (i, r) ans += "R";
            return ans;
        }
    }
    return no;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector<long long> p0, vector<long long> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	LR *obj;
	string answer;
	obj = new LR();
	clock_t startTime = clock();
	answer = obj->construct(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector<long long> p0;
	vector<long long> p1;
	string p2;
	
	{
	// ----- test 0 -----
	long long t0[] = {0ll,1ll,0ll,0ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	long long t1[] = {0ll,1ll,2ll,1ll,0ll};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "LL";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	long long t0[] = {0ll,0ll,0ll,1ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	long long t1[] = {0ll,1ll,0ll,0ll};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "No solution";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	long long t0[] = {1ll,2ll,3ll,4ll,5ll,6ll,7ll,8ll,9ll,10ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	long long t1[] = {12ll,24ll,56ll,95ll,12ll,78ll,0ll,100ll,54ll,88ll};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "No solution";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	long long t0[] = {1ll,0ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	long long t1[] = {11ll,11ll,10ll};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "RRRRR";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	long long t0[] = {1ll,1ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	long long t1[] = {562949953421312ll,562949953421312ll};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "RLLLRRRLLRRRLRLRRLLLLRLLRRLRRRLRRLRRLLRRRLLRRRLLL";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	long long t0[] = {0ll,0ll,0ll,0ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	long long t1[] = {0ll,0ll,0ll,1ll,0ll};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "No solution";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	long long t0[] = {123ll,456ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	long long t1[] = {123ll,456ll};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "";
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
    
	{
	// ----- test 7 -----
	long long t0[] = {9ll,8ll,0ll,8ll,9ll,1ll,2ll,3ll,9ll,0ll,1ll,7ll,3ll,0ll,5ll,0ll,7ll,3ll,9ll,1ll,0ll,6ll,5ll,1ll,1ll,3ll,4ll,0ll,6ll,1ll,0ll,0ll,3ll,8ll,3ll,1ll,1ll,4ll,6ll,1ll,0ll,1ll,5ll,0ll,0ll,1ll,0ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	long long t1[] = {756229183427ll,728328375347ll,687039952198ll,642324181080ll,598310595815ll,558301890190ll,524154908931ll,496336256762ll,474696570597ll,459415653804ll,451403155264ll,451760566151ll,460527786987ll,475511396064ll,492123985444ll,504629535868ll,508244221553ll,500892615263ll,483643105596ll,459771654374ll,433221595128ll,407316066553ll,384103132090ll,364300681285ll,347749383485ll,334273751058ll,324568636877ll,320412437386ll,323737540340ll,334967128921ll,351828881958ll,369693652691ll,383341067813ll,388939653529ll,384989204027ll,371976527758ll,351528122284ll,326078115182ll,299620751138ll,279368177278ll,276888982754ll,305905951954ll,374952260430ll,478580346970ll,595275335738ll,695800105495ll,757525824923ll,770819463834ll};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "RLRRLLLRLRLLRRLLLLLRRLRRRLRRLRLRRRRLR";
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// We have a cyclic array A of length n.
// For each valid i, element i-1 the left neighbor of element i.
// Additionally, element n-1 is the left neighbor of element 0.
// 
// 
// You are given two vector<long long>s s and t, each with n elements.
// Currently, we have A[i] = s[i] for each valid i.
// Our goal is to have A[i] = t[i] for each valid i.
// 
// 
// We can use two operations that modify the contents of A:
// 
// Operation L: Each element is increased by the value of its left neighbor.
// Operation R: Each element is increased by the value of its right neighbor.
// 
// 
// Note that all changes happen simultaneously. For example, if you use the operation L, the new value of A[7] is computed as the sum of the old value of A[7] and the old value of A[6].
// 
// 
// If there is no way to reach the desired goal state, return "No solution".
// Otherwise return any valid way of doing so by using at most 100 operations.
// More precisely, return one valid sequence of operations encoded as a string of 'L's and 'R's.
// 
// 
// If there are multiple valid solutions, you may return any of them.
// In particular, you are not required to find the shortest valid solution.
// Any valid solution will be accepted as long as its length does not exceed 100.
// We can prove that if there is an valid solution then there must exist one with length at most 100.
// 
// DEFINITION
// Class:LR
// Method:construct
// Parameters:vector<long long>, vector<long long>
// Returns:string
// Method signature:string construct(vector<long long> s, vector<long long> t)
// 
// 
// CONSTRAINTS
// -s will contain between 2 and 50 elements, inclusive.
// -s and t will contain the same number of elements.
// -Each element in s will be between 0 and 1,000,000,000,000,000 (10^15) inclusive.
// -Each element in t will be between 0 and 1,000,000,000,000,000 (10^15) inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {0,1,0,0,0}
// {0,1,2,1,0}
// 
// Returns: "LL"
// 
// The first operation L will change A into {0,1,1,0,0} and then the second operation L will produce the array we wanted.
// 
// 1)
// {0,0,0,1}
// {0,1,0,0}
// 
// Returns: "No solution"
// 
// Even though A is cyclic, the precise indices matter. Here, s and t are two different configurations, and there is no valid way to change this s into this t.
// 
// 2)
// {1,2,3,4,5,6,7,8,9,10}
// {12,24,56,95,12,78,0,100,54,88}
// 
// Returns: "No solution"
// 
// Regardless of the type and order of operations all elements of A will always remain positive.
// However, t contains a zero.
// Therefore, t cannot be reached.
// 
// 3)
// {1,0,0}
// {11,11,10}
// 
// Returns: "RRRRR"
// 
// The sequence of five operations R will change the array A as follows: 
// {1,0,0} -> {1,0,1} -> {1,1,2} -> {2,3,3} -> {5,6,5} -> {11,11,10}.
// 
// 4)
// {1,1}
// {562949953421312,562949953421312}
// 
// Returns: "RLLLRRRLLRRRLRLRRLLLLRLLRRLRRRLRRLRRLLRRRLLRRRLLL"
// 
// We start with A[0] = A[1] = 1, and we want A[0] = A[1] = 2^49.
// We can easily verify that in this case each operation changes A from {x, x} into {2x, 2x}.
// Therefore, any string of exactly 49 'L's and 'R's is a valid answer.
// 
// 5)
// {0,0,0,0,0}
// {0,0,0,1,0}
// 
// Returns: "No solution"
// 
// 
// 
// 6)
// {123,456}
// {123,456}
// 
// Returns: ""
// 
// 
// 
// END KAWIGIEDIT TESTING










//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
