#include <vector>
#include <list>
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <string>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

#define px first
#define py second
#define pb push_back
#define mp make_pair
#define pque priority_queue
#define lowbit(x) ((x) & -(x))
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define clr(v, e) memset(v, e, sizeof(v))
#define rep(it, v) for (auto it : v)
#define forn(i, n) for (int i = 0; i < (n); ++ i)
#define rforn(i, n) for (int i = (n) - 1; i >= 0; -- i)
#define form(i, a, b) for (int i = (a); i <= (b); ++ i)
#define rform(i, a, b) for (int i = (b); i >= (a); -- i)
#define forv(i, v) for (int i = 0; i < sz(v); ++ i)
#define iter(it, v) for (auto it = v.begin(); it != v.end(); ++ it)

typedef long long lint;
typedef vector<int> vint;
typedef vector<string> vstr;
typedef pair<int, int> pint;
typedef vector<lint> vlint;
typedef vector<pint> vpint;

class CentipedeSocks {
public:
	int fewestSocks(int, int, vector <int>);
};

bool satisfy(int c, int f, vint s) {
    int w = 0;
    for (auto x : s) {
        w += x / f;
    }
    return w >= c;
}

int CentipedeSocks::fewestSocks(int C, int F, vector <int> s) {
    if (! satisfy(C, F, s)) {
        return -1;
    }
    vint v;
    int ans = C * F, n = 0;
    for (auto x : s) {
        if (x < F) {
            ans += x;
        } else {
            n += x / F - 1;
            v.pb(x % F);
        }
    }

    int mi = F - 1;
    sort(all(v), greater<int>());
    for (auto x : v) {
        if (n ++ < C) {
            ans += x;
            mi = min(mi, x);
        } else {
            ans += F - 1;
        }
    }

    return ans - mi;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	CentipedeSocks *obj;
	int answer;
	obj = new CentipedeSocks();
	clock_t startTime = clock();
	answer = obj->fewestSocks(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	vector <int> p2;
	int p3;

	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 100;
	int t2[] = {1,1,1,1,100};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 104;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 100;
	int t2[] = {40,50,60,70};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 10;
	int t2[] = {12345};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 30;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 2;
	p1 = 3;
	int t2[] = {4,4,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 10;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 2;
	p1 = 5;
	int t2[] = {6,6,6,24};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, false, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// You have C pet centipedes.
// You want to take them out for a walk, but it's quite cold.
// You want to give them socks to make them feel more comfortable.
// 
// 
// Each of your centipedes has F feet.
// You have a large bin with centipede socks.
// The socks come in different colors, but your centipedes are quite picky and each of them requires to wear F socks of the same color.
// 
// 
// You are given the ints C and F.
// You are also given the vector <int> sockCounts.
// Each element of sockCounts is the number of socks of one particular color you have in the bin.
// 
// 
// Find and return the smallest X such that if you take any X socks out of the bin, it is guaranteed that you will be able to use some of them to keep all feet of all your centipedes warm.
// If there is no such X, return -1 instead.
// 
// 
// DEFINITION
// Class:CentipedeSocks
// Method:fewestSocks
// Parameters:int, int, vector <int>
// Returns:int
// Method signature:int fewestSocks(int C, int F, vector <int> sockCounts)
// 
// 
// CONSTRAINTS
// -C will be between 1 and 50, inclusive.
// -F will be between 1 and 100, inclusive.
// -sockCounts will have between 1 and 100 elements, inclusive.
// -Each element of sockCounts will be between 1 and 10^7, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 100
// {1, 1, 1, 1, 100}
// 
// Returns: 104
// 
// One centipede with 100 feet. If you are really unlucky, you need to remove all 104 socks from the bin until you get all 100 pink ones.
// 
// 1)
// 1
// 100
// {40, 50, 60, 70}
// 
// Returns: -1
// 
// You do not have 100 socks of any single color, so the poor centipede will be cold.
// 
// 2)
// 3
// 10
// {12345}
// 
// Returns: 30
// 
// There are 12345 red socks in the bin. You just grab the first 30 and put 10 of them onto each of your centipedes.
// 
// 3)
// 2
// 3
// {4, 4, 5}
// 
// Returns: 10
// 
// Two red, two blue, and five pink socks are still not enough to satisfy two three-legged centipedes.
// 
// END KAWIGIEDIT TESTING










//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
