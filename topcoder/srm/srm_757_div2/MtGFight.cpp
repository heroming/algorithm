#include <vector>
#include <list>
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <string>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

#define px first
#define py second
#define pb push_back
#define mp make_pair
#define pque priority_queue
#define lowbit(x) ((x) & -(x))
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define clr(v, e) memset(v, e, sizeof(v))
#define rep(it, v) for (auto it : v)
#define forn(i, n) for (int i = 0; i < (n); ++ i)
#define rforn(i, n) for (int i = (n) - 1; i >= 0; -- i)
#define form(i, a, b) for (int i = (a); i <= (b); ++ i)
#define rform(i, a, b) for (int i = (b); i >= (a); -- i)
#define forv(i, v) for (int i = 0; i < sz(v); ++ i)
#define iter(it, v) for (auto it = v.begin(); it != v.end(); ++ it)

typedef long long lint;
typedef vector<int> vint;
typedef vector<string> vstr;
typedef pair<int, int> pint;
typedef vector<lint> vlint;
typedef vector<pint> vpint;

class MtGFight {
public:
	vector <int> findGoodFight(vector <int>, vector <int>);
};

vector <int> MtGFight::findGoodFight(vector <int> a, vector <int> b) {
    int n = sz(a);
    for (int i = 0; i < n; ++ i) {
        for (int j = 0; j < n; ++ j) {
            if (i == j) continue;
            if (b[j] <= a[i] && b[i] > a[j]) {
                return {i, j};
            }
        }
    }
    return {};
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	MtGFight *obj;
	vector <int> answer;
	obj = new MtGFight();
	clock_t startTime = clock();
	answer = obj->findGoodFight(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	vector <int> p2;

	{
	// ----- test 0 -----
	int t0[] = {0,2,1,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {10,5,3,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {0,1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {10,11,12,13};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {10,11,12,13};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {4,1,7,5,3,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,2,9,1,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// In the card game Magic the Gathering, some cards represent creatures.
// Each creature has two parameters: power and toughness.
// Whenever two creatures fight, each deals damage equal to its power to the other creature.
// Whenever a creature receives damage greater than or equal to its toughness, it dies.
// 
// 
// You are given the description of N creatures: the vector <int>s power and toughness, each containing N elements.
// For each valid i, there is a creature whose power is power[i] and whose toughness is toughness[i].
// 
// 
// Find two distinct indices i and j such that if creature i fights creature j, creature i will survive and creature j will die.
// Return {i, j}.
// Any valid answer will be accepted.
// If there is no valid answer, return an empty vector <int> instead.
// 
// 
// DEFINITION
// Class:MtGFight
// Method:findGoodFight
// Parameters:vector <int>, vector <int>
// Returns:vector <int>
// Method signature:vector <int> findGoodFight(vector <int> power, vector <int> toughness)
// 
// 
// NOTES
// -If an answer exists, the correct return value is a vector <int> with two elements. Element 0 should be the number of the creature that survives, and element 1 should be the number of the creature that dies.
// -You are not given the value N explicitly. Instead, you can determine it by looking at the number of elements in power (or toughness).
// 
// 
// CONSTRAINTS
// -power will contain between 2 and 50 elements, inclusive.
// -toughness will contain the same number of elements as power.
// -Each element of power will be between 0 and 20, inclusive.
// -Each element of toughness will be between 1 and 20, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {0, 2, 1, 4}
// {10, 5, 3, 1}
// 
// Returns: {1, 3 }
// 
// We will use P/T to denote a creature with power P and toughness T.
// The input describes four creatures: creature number 0 is 0/10, creature number 1 is 2/5, creature number 2 is 1/3, and creature number 3 is 4/1.
// The only pair that is a correct answer is {1, 3}. When creatures 1 and 3 fight, creature 1 kills creature 3 and manages to survive the fight.
// (If creatures 0 and 1 fight, they both survive. If creatures 2 and 3 fight, they both die. And so on.)
// 
// 1)
// {0, 1, 2, 3}
// {10, 11, 12, 13}
// 
// Returns: { }
// 
// All these creatures are weak and tough, so in any fight both creatures survive.
// 
// 2)
// {10, 11, 12, 13}
// {1, 2, 3, 4}
// 
// Returns: { }
// 
// Each of these creatures is powerful but frail. In any fight both creatures will die.
// 
// 3)
// {4, 1, 7, 5, 3, 5}
// {3, 2, 9, 1, 3, 4}
// 
// Returns: {0, 1 }
// 
// There are other correct answers as well, for example, {2, 1} would also be accepted.
// Note that the order matters: {1, 0} and {1, 2} are not correct answers.
// 
// END KAWIGIEDIT TESTING










//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
