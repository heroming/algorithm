#include <vector>
#include <list>
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <string>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

#define px first
#define py second
#define pb push_back
#define mp make_pair
#define pque priority_queue
#define lowbit(x) ((x) & -(x))
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define clr(v, e) memset(v, e, sizeof(v))
#define rep(it, v) for (auto it : v)
#define forn(i, n) for (int i = 0; i < (n); ++ i)
#define rforn(i, n) for (int i = (n) - 1; i >= 0; -- i)
#define form(i, a, b) for (int i = (a); i <= (b); ++ i)
#define rform(i, a, b) for (int i = (b); i >= (a); -- i)
#define forv(i, v) for (int i = 0; i < sz(v); ++ i)
#define iter(it, v) for (auto it = v.begin(); it != v.end(); ++ it)

typedef long long lint;
typedef vector<int> vint;
typedef vector<string> vstr;
typedef pair<int, int> pint;
typedef vector<lint> vlint;
typedef vector<pint> vpint;

class EllysHash {
public:
	long long getHash(int, string, string, string);
};

const int maxn = 32;
const lint mul = 127;
const lint mod = 1000000000000037L;

vlint u, v, t;
lint h[maxn];

void prepare(vlint & s, int a, int b, string A, string B, string C) {
    s.clear();
    s.pb(0L);
    for (int i = a; i < b; ++ i) {
        for (auto x : s) {
            t.pb((x + h[i] * A[i]) % mod);
            t.pb((x + h[i] * B[i]) % mod);
            t.pb((x + h[i] * C[i]) % mod);
        }
        swap(s, t);
        t.clear();
    }
}

lint upper(const vlint & s, lint x) {
    int l = 0, r = sz(s) - 1;
    while (l <= r) {
        int m = (l + r) >> 1;
        if (s[m] < x) {
            l = m + 1;
        } else {
            r = m - 1;
        }
    }
    return l < sz(s) ? s[l] : s.back();
}

long long EllysHash::getHash(int N, string A, string B, string C) {
    if (N == 1) {
        return min(min(A[0], B[0]), C[0]);
    }
    h[N - 1] = 1;
    for (int i = N - 2; i >= 0; -- i) {
        h[i] = h[i + 1] * mul % mod;
    }
    int n = N >> 1;
    prepare(u, 0, n, A, B, C);
    prepare(v, n, N, A, B, C);
    sort(all(u));
    sort(all(v));
    lint ans = (u[0] + v[0]) % mod;

    for (auto x : v) {
        lint y = upper(u, mod - x);
        ans = min(ans, (x + y) % mod);
    }

    return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, string p1, string p2, string p3, bool hasAnswer, long long p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"" << "," << "\"" << p3 << "\"";
	cout << "]" << endl;
	EllysHash *obj;
	long long answer;
	obj = new EllysHash();
	clock_t startTime = clock();
	answer = obj->getHash(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	string p1;
	string p2;
	string p3;
	long long p4;

	{
	// ----- test 0 -----
	p0 = 4;
	p1 = "ELLY";
	p2 = "KRIS";
	p3 = "STAN";
	p4 = 142572564ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 11;
	p1 = "TOPCODERSRM";
	p2 = "INTHEMIDDLE";
	p3 = "OFTHEDAYNOO";
	p4 = 2840613885160ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 18;
	p1 = "EVERYSTEPTHATITAKE";
	p2 = "ISANOTHERMISTAKETO";
	p3 = "YOOOOOOOOOOOOOOOOO";
	p4 = 325013178ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 28;
	p1 = "ANDNEVERMINDTHENOISEYOUHEARD";
	p2 = "ITSJUSTTHEBEASTSUNDERYOURBED";
	p3 = "INYOURCLOSETINYOURHEAAAAAAAD";
	p4 = 745ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// This problem has a nonstandard time limit: 3 seconds.
// 
// 
// Recently Elly, Kriss, and Stancho learned the following algorithm for hashing a string:
// 
// 
// 
// function hash(S):
//     answer = 0
//     for each valid index i into S, starting from 0:
//         answer = (answer * 127 + ord(S[i])) mod 1000000000000037
//     return answer
// 
// 
// 
// The returned value is called the hash of the string S.
// In the pseudocode, ord(S[i]) is the ASCII code of the i-th character of the string S. 
// 
// 
// 
// Each of the three friends has a favorite string with length N: the one Elly has is A, the one Kriss has is B and the one Stancho has is C. Now they have decided to create a new string S with the same length N such that for each position i we have S[i] = A[i] or S[i] = B[i] or S[i] = C[i]. 
// 
// 
// 
// Among all such strings Elly, Kriss, and Stancho want to find the string S with the lowest hash.
// You are given the length of the strings N and the three favorite strings A, B and C.
// Find and return the value of the smallest possible hash of a string S with the above property.
// 
// 
// DEFINITION
// Class:EllysHash
// Method:getHash
// Parameters:int, string, string, string
// Returns:long long
// Method signature:long long getHash(int N, string A, string B, string C)
// 
// 
// NOTES
// -The uppercase letter 'A' has ASCII code 65, 'B' has code 66, ..., and 'Z' has code 90.
// 
// 
// CONSTRAINTS
// -N will be between 1 and 28, inclusive.
// -A, B and C will contain exactly N characters.
// -Each character of A, B and C will be an uppercase letter of the English alphabet ({'A'-'Z'}).
// 
// 
// EXAMPLES
// 
// 0)
// 4
// "ELLY"
// "KRIS"
// "STAN"
// 
// Returns: 142572564
// 
// There are 81 possible strings that can be formed, some of which are:
// 
//     "KLAY" (with hash 154862873)
//     "SRLY" (with hash 171348108)
//     "KRIS" (with hash 154960657)
//     "ELAN" (with hash 142572564)
// 
// The last one is the one with the lowest hash among all 81.
// 
// 1)
// 11
// "TOPCODERSRM"
// "INTHEMIDDLE"
// "OFTHEDAYNOO"
// 
// Returns: 2840613885160
// 
// The best possible string that can be formed is "TOPHODADDLE" with hash 2840613885160.
// 
// 2)
// 18
// "EVERYSTEPTHATITAKE"
// "ISANOTHERMISTAKETO"
// "YOOOOOOOOOOOOOOOOO"
// 
// Returns: 325013178
// 
// The best possible string that can be formed is "YVORYSHOROISOOKAKE" with hash 325013178.
// 
// 3)
// 28
// "ANDNEVERMINDTHENOISEYOUHEARD"
// "ITSJUSTTHEBEASTSUNDERYOURBED"
// "INYOURCLOSETINYOURHEAAAAAAAD"
// 
// Returns: 745
// 
// 
// 
// END KAWIGIEDIT TESTING










//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
