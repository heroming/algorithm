#include <vector>
#include <list>
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <string>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

#define px first
#define py second
#define pb push_back
#define mp make_pair
#define pque priority_queue
#define lowbit(x) ((x) & -(x))
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define clr(v, e) memset(v, e, sizeof(v))
#define rep(it, v) for (auto it : v)
#define forn(i, n) for (int i = 0; i < (n); ++ i)
#define rforn(i, n) for (int i = (n) - 1; i >= 0; -- i)
#define form(i, a, b) for (int i = (a); i <= (b); ++ i)
#define rform(i, a, b) for (int i = (b); i >= (a); -- i)
#define forv(i, v) for (int i = 0; i < sz(v); ++ i)
#define iter(it, v) for (auto it = v.begin(); it != v.end(); ++ it)

typedef long long lint;
typedef vector<int> vint;
typedef vector<string> vstr;
typedef pair<int, int> pint;
typedef vector<lint> vlint;
typedef vector<pint> vpint;

class EllysViewPoints {
public:
	int getCount(int, int, vector <string>);
};

int EllysViewPoints::getCount(int N, int M, vector <string> mat) {
    for (int i = 0; i < N; ++ i) {
        for (int j = 0; j < M; ++ j) {
            if (mat[i][j] == '#') {
                for (int k = 0; k < N; ++ k) {
                    if (mat[k][j] == '.') {
                        mat[k][j] = '*';
                    }
                }
                for (int k = 0; k < M; ++ k) {
                    if (mat[i][k] == '.') {
                        mat[i][k] = '*';
                    }
                }
            }
        }
    }

    int ret = 0;
    for (int i = 0; i < N; ++ i) {
        for (int j = 0; j < M; ++ j) {
            if (mat[i][j] == '.') {
                ++ ret;
            }
        }
    }

    return ret;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <string> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	EllysViewPoints *obj;
	int answer;
	obj = new EllysViewPoints();
	clock_t startTime = clock();
	answer = obj->getCount(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	vector <string> p2;
	int p3;

	{
	// ----- test 0 -----
	p0 = 6;
	p1 = 9;
	string t2[] = {"..#......",".........",".###..#..",".#.##..#.","...#..#..","........."};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 6;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 1;
	string t2[] = {"."};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 7;
	p1 = 4;
	string t2[] = {"####","####","####","####","####","####","####"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 9;
	p1 = 48;
	string t2[] = {"#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.","................................................",".#####...###...###.......##....###....##..#####.","...#....#.....#...#.....#..#..#...#..#.#..#...#.","...#....#.....#...#........#..#...#....#..#####.","...#....#.....#...#......#....#...#....#......#.","...#.....###...###......####...###.....#..#####.","................................................","#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#."};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 18;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Elly has a rectangular matrix with N rows and M columns. Each of the cells in the matrix can be either blocked (denoted '#') or free (denoted '.'). 
// 
// 
// An empty cell is called a view point if we can see outside the matrix when looking directly in each of the four cardinal directions: north, south, east, and west. 
// In other words, a cell C is a view point if and only if all cells in those four directions from cell C are free.
// 
// 
// Below is an example matrix that contains six view points. One of these is marked by an asterisk ('*').
// 
// 
// ..#......
// .....*...
// .###..#..
// .#.##..#.
// ...#..#..
// .........
// 
// 
// The girl has given you the ints N and M, as well as the vector <string> matrix. Return the number of view points in the given matrix.
// 
// 
// 
// DEFINITION
// Class:EllysViewPoints
// Method:getCount
// Parameters:int, int, vector <string>
// Returns:int
// Method signature:int getCount(int N, int M, vector <string> matrix)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 50, inclusive.
// -M will be between 1 and 50, inclusive.
// -matrix will contain exactly N elements.
// -Each element of matrix will contain exactly M characters.
// -Each character in matrix will be either '#' or '.'.
// 
// 
// EXAMPLES
// 
// 0)
// 6
// 9
// {"..#......",
//  ".........",
//  ".###..#..",
//  ".#.##..#.",
//  "...#..#..",
//  "........."}
// 
// Returns: 6
// 
// The example from the problem statement.
// 
// 1)
// 1
// 1
// {"."}
// 
// Returns: 1
// 
// It's pretty obvious which cell is the view point.
// 
// 2)
// 7
// 4
// {"####",
//  "####",
//  "####",
//  "####",
//  "####",
//  "####",
//  "####"}
// 
// Returns: 0
// 
// With everything blocked, there are obviously no view points.
// 
// 3)
// 9
// 48
// {"#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.",
//  "................................................",
//  ".#####...###...###.......##....###....##..#####.",
//  "...#....#.....#...#.....#..#..#...#..#.#..#...#.",
//  "...#....#.....#...#........#..#...#....#..#####.",
//  "...#....#.....#...#......#....#...#....#......#.",
//  "...#.....###...###......####...###.....#..#####.",
//  "................................................",
//  "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#."}
// 
// Returns: 18
// 
// Good luck!
// 
// END KAWIGIEDIT TESTING










//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
