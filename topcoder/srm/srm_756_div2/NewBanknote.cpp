#include <vector>
#include <list>
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <string>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

#define px first
#define py second
#define pb push_back
#define mp make_pair
#define pque priority_queue
#define lowbit(x) ((x) & -(x))
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define clr(v, e) memset(v, e, sizeof(v))
#define rep(it, v) for (auto it : v)
#define forn(i, n) for (int i = 0; i < (n); ++ i)
#define rforn(i, n) for (int i = (n) - 1; i >= 0; -- i)
#define form(i, a, b) for (int i = (a); i <= (b); ++ i)
#define rform(i, a, b) for (int i = (b); i >= (a); -- i)
#define forv(i, v) for (int i = 0; i < sz(v); ++ i)
#define iter(it, v) for (auto it = v.begin(); it != v.end(); ++ it)

typedef long long lint;
typedef vector<int> vint;
typedef vector<string> vstr;
typedef pair<int, int> pint;
typedef vector<lint> vlint;
typedef vector<pint> vpint;

class NewBanknote {
public:
	vector <int> fewestPieces(int, vector <int>);
};

const lint M = 50000L;
const lint inf = 1e9 + 7;
const int P[] = {0, 1, 1, 2, 2, 1, 2, 2, 3, 3};

lint normal(lint x) {
    lint ret = x / M;
    x = x % M;
    while (x) {
        ret += P[x % 10];
        x /= 10;
    }
    return ret;
}

int solve(const lint e, const lint w) {
    lint ans = inf, n = 0;
    forn (i, M) {
        if (w < n) break;
        ans = min(ans, normal(w - n) + i);
        n += e;
    }
    lint t = w / e;
    n = w / e * e;
    forn (i, M) {
        if (t < M) break;
        ans = min(ans, normal(w - n) + t - i);
        n -= e;
    }
    return (int)ans;
}

vector <int> NewBanknote::fewestPieces(int newBanknote, vector <int> amountsToPay) {
    vint ans;
    for (auto x : amountsToPay) {
        ans.pb(solve(newBanknote, x));
    }
    return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	NewBanknote *obj;
	vector <int> answer;
	obj = new NewBanknote();
	clock_t startTime = clock();
	answer = obj->fewestPieces(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector <int> p1;
	vector <int> p2;

	{
	// ----- test 0 -----
	p0 = 4700;
	int t1[] = {53,9400,9401,30000};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {3,2,3,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 1234;
	int t1[] = {1233,1234,1235};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {6,1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 1000;
	int t1[] = {1233,100047};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {6,6};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// In this problem we use the Euro currency. One euro equals 100 cents. All amounts in this problem will be in cents to avoid dealing with non-integer numbers.
// 
// 
// Euro coins have the following denominations: 1, 2, 5, 10, 20, 50, 100, and 200 cents.
// Euro banknotes have the following denominations: 500, 1000, 2000, 5000, 10000, 20000, and 50000 cents.
// 
// 
// There are rumors that the European Committee will soon introduce a new banknote worth newBanknote cents.
// 
// 
// In this new monetary system, what will be the smallest number of coins and banknotes needed to pay exactly X cents?
// 
// 
// You are given the vector <int> amountsToPay.
// For each X in amountsToPay answer the above question.
// Return a vector <int> containing the answers.
// 
// 
// DEFINITION
// Class:NewBanknote
// Method:fewestPieces
// Parameters:int, vector <int>
// Returns:vector <int>
// Method signature:vector <int> fewestPieces(int newBanknote, vector <int> amountsToPay)
// 
// 
// CONSTRAINTS
// -newBanknote will be between 1 and 2*10^9, inclusive.
// -amountsToPay will have between 1 and 50 elements, inclusive.
// -Each element of amountsToPay will be between 1 and 2*10^9, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 4700
// {53, 9400, 9401, 30000}
// 
// Returns: {3, 2, 3, 2 }
// 
// The new banknote is worth exactly 47 euro.
// 
// When paying 53 cents, the new banknote is useless. The optimal way uses three coins: 50 + 2 + 1.
// When paying 94 euro, the optimal solution is to use two new banknotes.
// When paying 94 euro and 1 cent, the optimal solution is to use two new banknotes and a 1-cent coin.
// When paying 300 euro, the optimal solution is to use one 100-euro and one 200-euro banknote.
// 
// 
// 1)
// 1234
// {1233, 1234, 1235}
// 
// Returns: {6, 1, 2 }
// 
// 
// 
// 2)
// 1000
// {1233, 100047}
// 
// Returns: {6, 6 }
// 
// The new banknote is utterly useless: we already have 10-euro banknotes. Thus, the answer for any amount is the same as when paying using regular Euro denominations only.
// 
// END KAWIGIEDIT TESTING










//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
