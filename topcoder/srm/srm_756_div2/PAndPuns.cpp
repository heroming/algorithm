#include <vector>
#include <list>
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <string>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

#define px first
#define py second
#define pb push_back
#define mp make_pair
#define pque priority_queue
#define lowbit(x) ((x) & -(x))
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define clr(v, e) memset(v, e, sizeof(v))
#define rep(it, v) for (auto it : v)
#define forn(i, n) for (int i = 0; i < (n); ++ i)
#define rforn(i, n) for (int i = (n) - 1; i >= 0; -- i)
#define form(i, a, b) for (int i = (a); i <= (b); ++ i)
#define rform(i, a, b) for (int i = (b); i >= (a); -- i)
#define forv(i, v) for (int i = 0; i < sz(v); ++ i)
#define iter(it, v) for (auto it = v.begin(); it != v.end(); ++ it)

typedef long long lint;
typedef vector<int> vint;
typedef vector<string> vstr;
typedef pair<int, int> pint;
typedef vector<lint> vlint;
typedef vector<pint> vpint;

class PAndPuns {
public:
	string check(string);
};

string PAndPuns::check(string s) {
	const int n = sz(s);
    const string yes = "pun";
    const string no = "not a pun";

    for (int i = 1; i < n; ++ i) {
        for (int j = i + 2; j < n; ++ j) {
            if (s[i - 1] == s[j - 1] && s[i] == s[j]) {
                return yes;
            }
        }
    }
    return no;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	PAndPuns *obj;
	string answer;
	obj = new PAndPuns();
	clock_t startTime = clock();
	answer = obj->check(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;

	{
	// ----- test 0 -----
	p0 = "aaaa";
	p1 = "pun";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "aaab";
	p1 = "not a pun";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "pandpuns";
	p1 = "not a pun";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "producerandproduction";
	p1 = "pun";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Kaede loves puns. You want to please her by telling her a pun.
// Given the string text, you should return the string "pun" (quotes for clarity) if text is a pun. Otherwise, return "not a pun".
// For the purpose of this problem, text is a pun if there exists some string S of length two or more that has two non-overlapping occurrences in text. (Each occurrence must be a contiguous substring of text, you may not skip letters.)
// 
// 
// DEFINITION
// Class:PAndPuns
// Method:check
// Parameters:string
// Returns:string
// Method signature:string check(string text)
// 
// 
// CONSTRAINTS
// -Length of text will be between 4 and 2,500, inclusive.
// -text will consist of lowercase English letters only ('a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// "aaaa" 
// 
// Returns: "pun"
// 
// This is a pun because we can find two non-overlapping occurrences of the substring "aa".
// 
// 1)
// "aaab" 
// 
// Returns: "not a pun"
// 
// This is not a pun. Note that the two occurrences of "aa" in "aaab" overlap.
// 
// 2)
// "pandpuns" 
// 
// Returns: "not a pun"
// 
// "pan" and "pun" are similar but differ.
// 
// 3)
// "producerandproduction" 
// 
// Returns: "pun"
// 
// 
// 
// END KAWIGIEDIT TESTING










//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
