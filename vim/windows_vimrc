"Version: 1.0 BY HEROMING
source $VIMRUNTIME/mswin.vim
behave mswin
imap <c-d> <c-o>dd
imap <cr> <cr><left><right>
map o o<left><right>
imap <c-]> {<cr>}<c-o>O<left><right>
noremap <f6> =a{
syn on
colo desert
filetype indent on
se ru nu ar sw=4 ts=4 softtabstop=4 noswf et sta nowrap ww=<,>,[,] gfn=Consolas:h11
se hlsearch
se foldmethod=manual
autocmd BufEnter * lcd %:p:h
map <c-t> :tabnew<CR>
map <f5> :call Run()<CR><CR>
"map <f9> :call Python()<CR><CR>
"map<f3> :normal 0c^<cr>
map<f1> :normal ^<cr>

func Run()
    exec 'update'
    if (&filetype == 'cpp')
        if filereadable(expand('%<').'.in')
            exec '!start cmd /c _run_cpp %< < %<.in & pause'
        else
            exec '!start cmd /c _run_cpp %< & pause'
        endif
    elseif (&filetype == 'python')
        if filereadable(expand('%<').'.in')
            exec '!start cmd /c _run_python %<.py < %<.in & pause'
        else
            exec '!start cmd /c _run_python %<.py & pause'
        endif
    elseif (&filetype == 'java')
        if filereadable(expand('%<').'.in')
            exec '!start cmd /c _run_java %< < %<.in & pause'
        else
            exec '!start cmd /c _run_java %< & pause'
        endif
    elseif (&filetype == 'javascript')
        exec '!start cmd /c node %<.js & pause'
    elseif (expand('%:e') == 'scala')
        if filereadable(expand('%<').'.in')
            exec '!start cmd /c _run_scala %<.scala < %<.in & pause'
        else
            exec '!start cmd /c _run_scala %<.scala & pause'
        endif
    else
        if filereadable(expand('%<').'.in')
            exec '!start cmd /c _run_cpp %< < %<.in & pause'
        else
            exec '!start cmd /c _run_cpp %< & pause'
        endif
    endif
endfunc

map<f2> :call SetTitle()<CR>Gkkk
func SetTitle()
    if (&filetype == 'cpp')
        normal ggdG
        let l = 0
        let l = l + 1 | call setline(l, '/*')
        let l = l + 1 | call setline(l, ' * Author:heroming')
        "let l = l + 1 | call setline(l, ' * Type:')
        let l = l + 1 | call setline(l, ' * File:'.expand('%'))
        let l = l + 1 | call setline(l, ' * Time:'.strftime('%c'))
        let l = l + 1 | call setline(l, ' */')
        let l = l + 1 | call setline(l, '#include <vector>')
        let l = l + 1 | call setline(l, '#include <list>')
        let l = l + 1 | call setline(l, '#include <set>')
        let l = l + 1 | call setline(l, '#include <map>')
        let l = l + 1 | call setline(l, '#include <deque>')
        let l = l + 1 | call setline(l, '#include <queue>')
        let l = l + 1 | call setline(l, '#include <stack>')
        let l = l + 1 | call setline(l, '#include <bitset>')
        let l = l + 1 | call setline(l, '#include <algorithm>')
        let l = l + 1 | call setline(l, '#include <functional>')
        let l = l + 1 | call setline(l, '#include <numeric>')
        let l = l + 1 | call setline(l, '#include <utility>')
        let l = l + 1 | call setline(l, '#include <fstream>')
         let l = l + 1 | call setline(l, '#include <sstream>')
        let l = l + 1 | call setline(l, '#include <iostream>')
        let l = l + 1 | call setline(l, '#include <string>')
        let l = l + 1 | call setline(l, '#include <iomanip>')
        let l = l + 1 | call setline(l, '#include <cstdio>')
        let l = l + 1 | call setline(l, '#include <cmath>')
        let l = l + 1 | call setline(l, '#include <cstdlib>')
        let l = l + 1 | call setline(l, '#include <cstring>')
        let l = l + 1 | call setline(l, '#include <ctime>')
        let l = l + 1 | call setline(l, '#include <unordered_map>')
        let l = l + 1 | call setline(l, 'using namespace std;')
        
        let l = l + 1 | call setline(l, '')
        let l = l + 1 | call setline(l, '#define px first')
        let l = l + 1 | call setline(l, '#define py second')
        let l = l + 1 | call setline(l, '#define pb push_back')
        "let l = l + 1 | call setline(l, '#define mp make_pair')
        let l = l + 1 | call setline(l, '#define sz(v) ((int)(v).size())')
        let l = l + 1 | call setline(l, '#define all(v) (v).begin(), (v).end()')
        let l = l + 1 | call setline(l, '#define clr(v, e) memset(v, e, sizeof(v))')
        let l = l + 1 | call setline(l, '#define rep(it, v) for (auto it : v)')
        let l = l + 1 | call setline(l, '#define forn(i, n) for (int i = 0; i < (n); ++ i)')
        let l = l + 1 | call setline(l, '#define rforn(i, n) for (int i = (n) - 1; i >= 0; -- i)')
        let l = l + 1 | call setline(l, '#define form(i, a, b) for (int i = (a); i <= (b); ++ i)')
        let l = l + 1 | call setline(l, '#define rform(i, a, b) for (int i = (b); i >= (a); -- i)')
        let l = l + 1 | call setline(l, '#define forv(i, v) for (int i = 0; i < sz(v); ++ i)')
        let l = l + 1 | call setline(l, '#define iter(it, v) for (auto it = v.begin(); it != v.end(); ++ it)')
        
        "let l = l + 1 | call setline(l, '')
        "let l = l + 1 | call setline(l, '#define sqr(x) ((x) * (x))')
        "let l = l + 1 | call setline(l, '#define lowbit(x) ((x) & (-(x)))')
        "let l = l + 1 | call setline(l, '#define FOR(it, v) for (__typeof((v).begin()) it = (v).begin(); it != (v).end(); ++ it)')
        
        "let l = l + 1 | call setline(l, '')
        "let l = l + 1 | call setline(l, 'const double pi = acos(-1.0);')
        "let l = l + 1 | call setline(l, 'const double eps = 1e-8;')
        
        "let l = l + 1 | call setline(l, 'typedef unsigned long long ulint;')
        let l = l + 1 | call setline(l, '')
        let l = l + 1 | call setline(l, 'typedef long long lint;')
        let l = l + 1 | call setline(l, 'typedef vector<int> vint;')
        let l = l + 1 | call setline(l, 'typedef vector<string> vstring;')
        let l = l + 1 | call setline(l, 'typedef pair<int, int> pint;')
        let l = l + 1 | call setline(l, 'typedef vector<lint> vlint;')
        let l = l + 1 | call setline(l, 'typedef vector<pint> vpint;')
        
        "let l = l + 1 | call setline(l, 'template <class T> bool get_max(T& a, const T &b) {return b > a? a = b, 1: 0;}')
        "let l = l + 1 | call setline(l, 'template <class T> bool get_min(T& a, const T &b) {return b < a? a = b, 1: 0;}')
        let l = l + 1 | call setline(l, '')
        let l = l + 1 | call setline(l, 'int main() {')
        "let l = l + 1 | call setline(l, '{')
        "let l = l + 1 | call setline(l, '        freopen("data.in", "r", stdin);')
        let l = l + 1 | call setline(l, '    return 0;')
        let l = l + 1 | call setline(l, '}')
    elseif (&filetype == 'python')
        normal ggdG
        let l = 0
        let l = l + 1 | call setline(l, '#!/usr/bin/python')
        let l = l + 1 | call setline(l, '# -*- coding: utf-8 -*-')
        let l = l + 1 | call setline(l, "'''")
        let l = l + 1 | call setline(l, ' * Author:heroming')
        let l = l + 1 | call setline(l, ' * File:'.expand('%'))
        let l = l + 1 | call setline(l, ' * Time:'.strftime('%c'))
        let l = l + 1 | call setline(l, "'''")
        let l = l + 1 | call setline(l, '')
        let l = l + 1 | call setline(l, "if __name__ == '__main__' :")
        let l = l + 1 | call setline(l, '')
    elseif (&filetype == 'java')
        normal ggdG
        let l = 0
        let l = l + 1 | call setline(l, '/*')
        let l = l + 1 | call setline(l, ' * Author:heroming')
        let l = l + 1 | call setline(l, ' * File:'.expand('%'))
        let l = l + 1 | call setline(l, ' * Time:'.strftime('%c'))
        let l = l + 1 | call setline(l, ' */')
        let l = l + 1 | call setline(l, 'import java.io.*;')
        let l = l + 1 | call setline(l, 'import java.util.*;')
        let l = l + 1 | call setline(l, 'import java.math.*;')
        let l = l + 1 | call setline(l, '')
        let l = l + 1 | call setline(l, 'public class Main {')
        let l = l + 1 | call setline(l, '')
        let l = l + 1 | call setline(l, '    public static void main(String[] args) {')
        let l = l + 1 | call setline(l, '        Scanner sc = new Scanner(new BufferedInputStream(System.in));')
        let l = l + 1 | call setline(l, '')
        let l = l + 1 | call setline(l, '        sc.close();')
        let l = l + 1 | call setline(l, '    }')
        let l = l + 1 | call setline(l, '}')
    elseif (&filetype == 'sh')
        normal ggdG
        let l = 0
        let l = l + 1 | call setline(l, '#!/bin/bash')
        let l = l + 1 | call setline(l, '# -*- coding: utf-8 -*-')
        let l = l + 1 | call setline(l, '')
        let l = l + 1 | call setline(l, '# Author:heroming')
        let l = l + 1 | call setline(l, '# File:'.expand('%'))
        let l = l + 1 | call setline(l, '# Time:'.strftime('%c'))
        let l = l + 1 | call setline(l, '')
        let l = l + 1 | call setline(l, '')
    endif
    exec 'update'
endfunc

map<f7> :call SetTitleOld()<CR>Gkkk
func SetTitleOld()
    normal ggdG
    let l = 0
    let l = l + 1 | call setline(l, '/*')
    let l = l + 1 | call setline(l, ' * Author:heroming')
    let l = l + 1 | call setline(l, ' * File:'.expand('%'))
    let l = l + 1 | call setline(l, ' * Time:'.strftime('%c'))
    let l = l + 1 | call setline(l, ' */')
    "let l = l + 1 | call setline(l, '#include <vector>')
    "let l = l + 1 | call setline(l, '#include <list>')
    "let l = l + 1 | call setline(l, '#include <set>')
    "let l = l + 1 | call setline(l, '#include <map>')
    "let l = l + 1 | call setline(l, '#include <deque>')
    "let l = l + 1 | call setline(l, '#include <queue>')
    "let l = l + 1 | call setline(l, '#include <stack>')
    "let l = l + 1 | call setline(l, '#include <bitset>')
    "let l = l + 1 | call setline(l, '#include <algorithm>')
    "let l = l + 1 | call setline(l, '#include <functional>')
    "let l = l + 1 | call setline(l, '#include <numeric>')
    "let l = l + 1 | call setline(l, '#include <utility>')
    "let l = l + 1 | call setline(l, '#include <sstream>')
    "let l = l + 1 | call setline(l, '#include <iostream>')
    "let l = l + 1 | call setline(l, '#include <string>')
    "let l = l + 1 | call setline(l, '#include <iomanip>')
    "let l = l + 1 | call setline(l, '#include <cstdio>')
    "let l = l + 1 | call setline(l, '#include <cmath>')
    "let l = l + 1 | call setline(l, '#include <cstdlib>')
    "let l = l + 1 | call setline(l, '#include <cstring>')
    "let l = l + 1 | call setline(l, '#include <ctime>')
    let l = l + 1 | call setline(l, '#include <bits\stdc++.h>') 
    let l = l + 1 | call setline(l, 'using namespace std;')
    
    let l = l + 1 | call setline(l, '')
    let l = l + 1 | call setline(l, '#define px first')
    let l = l + 1 | call setline(l, '#define py second')
    let l = l + 1 | call setline(l, '#define pb push_back')
    let l = l + 1 | call setline(l, '#define sz(v) ((int)(v).size())')
    let l = l + 1 | call setline(l, '#define all(v) (v).begin(), (v).end()')
    let l = l + 1 | call setline(l, '#define clr(v, e) memset(v, e, sizeof(v))')
    let l = l + 1 | call setline(l, '#define rep(it, v) for (auto it : v)')
    let l = l + 1 | call setline(l, '#define forn(i, n) for (int i = 0; i < (n); ++ i)')
    let l = l + 1 | call setline(l, '#define form(i, a, b) for (int i = (a); i <= (b); ++ i)')
    let l = l + 1 | call setline(l, '#define forv(i, v) for (int i = 0; i < sz(v); ++ i)')
    let l = l + 1 | call setline(l, '#define iter(it, v) for (auto it = v.begin(); it != v.end(); ++ it)')
    
    let l = l + 1 | call setline(l, '')
    let l = l + 1 | call setline(l, 'typedef long long lint;')
    let l = l + 1 | call setline(l, 'typedef __int128 llint;')
    let l = l + 1 | call setline(l, 'typedef vector<int> vint;')
    let l = l + 1 | call setline(l, 'typedef vector<string> vstring;')
    let l = l + 1 | call setline(l, 'typedef pair<int, int> pint;')
    let l = l + 1 | call setline(l, 'typedef vector<lint> vlint;')
    let l = l + 1 | call setline(l, 'typedef vector<pint> vpint;')
    
    let l = l + 1 | call setline(l, '')
    let l = l + 1 | call setline(l, 'int main() {')
    let l = l + 1 | call setline(l, '    return 0;')
    let l = l + 1 | call setline(l, '}')
    exec 'update'
endfunc

map<f4> :call AddComment()<cr>
func AddComment()
    if (&filetype == 'cpp')
        if matchstr(getline('.'), '[^ ]') == '/'
            normal ^xx
            normal j^
        elseif matchstr(getline('.'), '[^ ]') != ''
            normal ^i//
            normal j^
        else
            normal j^
        endif
    elseif (&filetype == 'python')
        if matchstr(getline('.'), '[^ ]') == '#'
            normal ^x
            normal j^
        elseif matchstr(getline('.'), '[^ ]') != ''
            normal ^i#
            normal j^
        else
            normal j^
        endif
    elseif (&filetype == 'java')
        if matchstr(getline('.'), '[^ ]') == '/'
            normal ^xx
            normal j^
        elseif matchstr(getline('.'), '[^ ]') != ''
            normal ^i//
            normal j^
        else
            normal j^
        endif
    elseif (&filetype == 'scala')
        if matchstr(getline('.'), '[^ ]') == '/'
            normal ^xx
            normal j^
        elseif matchstr(getline('.'), '[^ ]') != ''
            normal ^i//
            normal j^
        else
            normal j^
        endif
    elseif (&filetype == 'matlab')
        if matchstr(getline('.'), '[^ ]') == '%'
            normal ^x
            normal j^
        elseif matchstr(getline('.'), '[^ ]') != ''
            normal ^i%
            normal j^
        else
            normal j^
        endif
    elseif (&filetype == 'sh')
        if matchstr(getline('.'), '[^ ]') == '#'
            normal ^x
            normal j^
        elseif matchstr(getline('.'), '[^ ]') != ''
            normal ^i#
            normal j^
        else
            normal j^
        endif
    endif
endfunc

set printoptions=syntax:n,number:y,portrait:y
set cursorline
set guifont=Lucida_Sans_typewriter:h10:b

cd e:\Code

"set encoding=utf-8
"set langmenu=zh_CN.UTF-8
"language message zh_CN.UTF-8
"set termencoding=utf-8
