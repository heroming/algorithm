class Solution {
    private void dfs(int u, int s, int[] belong, int[] node, int[][] g) {
        ++node[s];
        belong[u] = s;
        for (int v = 0; v < g.length; ++v) {
            if (u != v && g[u][v] == 1 && belong[v] == 0) {
                dfs(v, s, belong, node, g);
            }
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int[] belong = new int[graph.length];
        int[] node = new int[graph.length + 1];
        int part = 1;
        for (int i = 0; i < graph.length; ++i) {
            if (belong[i] == 0) {
                dfs(i, part++, belong, node, graph);
            }
        }
        int[] count = new int[part];
        for (int x : initial) {
            ++count[belong[x]];
        }
        int ans = -1, reduce = -1;
        for (int x : initial) {
            int w = count[belong[x]] == 1 ? node[belong[x]] : 0;
            if (reduce < w) {
                ans = x;
                reduce = w;
            } else if (reduce == w && x < ans) {
                ans = x;
            }
        }
        return ans;
    }
}
